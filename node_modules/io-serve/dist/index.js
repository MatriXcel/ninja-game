#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const argv_1 = require("./argv");
const express = require("express");
const bodyParser = require("body-parser");
const methodOverride = require("method-override");
const path = require("path");
const fs = require("fs-extra");
const chalk_1 = require("chalk");
const app = express();
app.use(methodOverride());
app.use(bodyParser.raw({
    limit: '100gb',
    type: '*/*'
}));
app.disable('x-powered-by');
const getPath = (req) => path.join(process.cwd(), path.normalize(req.path).replace(/^(\.\.[\/\\])+/, ''));
const getFileBlockingDirectory = (filePath) => fs.ensureDir(path.dirname(filePath)).then(() => undefined).catch(e => e.path);
const unblockPath = async (filePath) => {
    let blockingFile;
    while (blockingFile = await getFileBlockingDirectory(filePath)) {
        await fs.remove(blockingFile);
    }
    if (await fs.pathExists(filePath)) {
        const stat = await fs.lstat(filePath);
        if (stat.isDirectory()) {
            await fs.remove(filePath);
        }
    }
};
app.route('*')
    .get(async (req, res) => {
    const filePath = getPath(req);
    console.log(`${chalk_1.default.black.bgGreen('GET')} ${filePath}`);
    if (await fs.pathExists(filePath)) {
        const stat = await fs.lstat(filePath);
        if (stat.isFile()) {
            res.header('X-Resource-Type', 'file').sendFile(filePath, {
                dotfiles: 'allow'
            });
        }
        else if (stat.isDirectory()) {
            res.header('X-Resource-Type', 'directory').json(await Promise.all(((await fs.readdir(filePath)).map(async (p) => p + ((await fs.lstat(path.join(filePath, p))).isDirectory() ? '/' : '')))));
        }
        else {
            res.status(415).end();
        }
    }
    else {
        res.status(404).end();
    }
})
    .put(async (req, res) => {
    const filePath = getPath(req);
    console.log(`${chalk_1.default.black.bgMagenta('PUT')} ${filePath}`);
    await unblockPath(filePath);
    await fs.writeFile(filePath, req.body);
    res.end();
})
    .patch(async (req, res) => {
    const filePath = getPath(req);
    console.log(`${chalk_1.default.black.bgCyan('PATCH')} ${filePath}`);
    await unblockPath(filePath);
    await fs.appendFile(filePath, req.body);
    res.end();
})
    .delete(async (req, res) => {
    const filePath = getPath(req);
    console.log(`${chalk_1.default.black.bgRed('DELETE')} ${filePath}`);
    if (await fs.pathExists(filePath)) {
        await fs.remove(filePath);
        res.status(200).end();
    }
    else {
        res.status(404).end();
    }
});
app.listen(argv_1.default.port, argv_1.default.bind || 'localhost');
console.log(`${chalk_1.default.magenta('io-serve')} is now listening on port ${chalk_1.default.cyan(argv_1.default.port.toString())}`);
//# sourceMappingURL=index.js.map